#41. Entity Framework Core. Introduction to EF Core. DBContext Configuration and 
Initialization. Create Model. Entity Properties. Relationships. Index and Constraints.


1.  Напишите краткое описание того, что представляет собой Entity Framework Core (EF Core),
 и его важности для разработки .NET. 
-  это ORM (Object-Relational Mapping) фреймворк для работы с базами данных в приложениях 
.NET. Он позволяет разработчикам работать с данными в виде объектов и классов, скрывая 
детали взаимодействия с базой данных. EF Core упрощает разработку приложений, ускоряя 
процесс доступа к данным и уменьшая необходимость вручную писать SQL-запросы.

2.  Обсудите подход Model-First в EF Core. Какую пользу он приносит разработчикам с точки 
зрения управления схемами баз данных и разработки приложений?
- Model-First подход в EF Core позволяет разработчикам создавать модели данных сначала, 
опираясь на объекты и классы приложения, а затем генерировать схему базы данных на основе 
этих моделей. Это облегчает управление схемами баз данных, так как изменения в модели 
автоматически отражаются на схеме, и наоборот. Разработчики могут фокусироваться на 
логике приложения, не беспокоясь о подробностях структуры базы данных.

3.  Объясните интеграцию LINQ с EF Core. Как она улучшает процесс написания запросов к базе 
данных в коде на C#?
- Интеграция LINQ с EF Core позволяет использовать язык запросов LINQ (Language Integrated Query) 
для написания запросов к базе данных прямо в коде на C#. Это делает код более понятным и 
поддерживаемым, так как запросы записываются на языке программирования, а не на SQL. 
LINQ также предоставляет статическую типизацию и проверку ошибок на этапе компиляции, 
что помогает обнаруживать ошибки в запросах заранее.

4.  Опишите концепцию миграций в EF Core. Почему миграции необходимы для версионирования 
схем баз данных и развертывания приложений?
- Миграции в EF Core представляют собой автоматизированный способ изменения схемы базы 
данных с учетом изменений в моделях данных приложения. Они позволяют создавать и применять 
изменения в схеме базы данных с минимальными усилиями, а также отслеживать и управлять 
версиями схемы данных. Миграции необходимы для обеспечения согласованности структуры 
базы данных с моделью данных приложения при развертывании и обновлении приложений.



