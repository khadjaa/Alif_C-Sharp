#29. .NET Collections. Stack. ArrayList. Hashtable.


1.  Перечислите три основные операции, которые можно выполнить над стеком System.Collections.
Generic.Stack<T>, и дайте краткое описание каждой из них.

Push: добавление элемента в вершину стека.
Pop: удаление и возврат элемента из вершины стека.
Peek: просмотр элемента в вершине стека без его удаления.

2.  В каких сценариях обычно используется System.Collections.Generic.Stack<T>, в частности 
для сохранения состояния переменных при вызове процедур?
- Обычно используется в сценариях, где требуется временное хранение данных в порядке 
Last-In-First-Out (LIFO), например, при реализации операций отмены или возврата к 
предыдущему состоянию переменных при вызове процедур.

3.  Может ли Stack<T> принимать null в качестве допустимого значения, и допускается ли 
дублирование элементов?
- Stack<T> может принимать null в качестве допустимого значения, и допускается дублирование 
элементов. Null может быть добавлен в стек, и элементы могут быть повторно добавлены и 
извлечены.

4.  Объясните, почему необходимо вызывать метод Sort массива ArrayList перед выполнением 
операций, требующих его сортировки. Какова альтернатива хранения отсортированной коллекции?
- Метод Sort массива ArrayList необходим для упорядочивания элементов внутри коллекции. 
Если операции требуют отсортированных данных, вызов Sort обеспечивает правильный порядок 
элементов. Альтернативой хранения отсортированной коллекции может быть использование 
класса SortedList<T>, который автоматически сортирует элементы при добавлении.

5.  Опишите роль коэффициента загрузки в Hashtable и то, как он влияет на компромисс 
между временем поиска и потреблением памяти.
- Коэффициент загрузки в Hashtable определяет, насколько заполнена таблица данными перед 
увеличением ее размера. Он влияет на компромисс между временем поиска и потреблением памяти,
 поскольку слишком маленький коэффициент загрузки может привести к большому количеству 
коллизий, а слишком большой - к избыточному использованию памяти.

6.  Какие требования предъявляются к ключевым объектам в Hashtable в отношении методов 
Object.GetHashCode и Object.Equals?
- Ключевые объекты в Hashtable должны правильно реализовывать методы Object.GetHashCode() 
и Object.Equals(), чтобы гарантировать корректное хеширование и сравнение. Метод 
GetHashCode должен возвращать одинаковый хеш-код для эквивалентных объектов, 
а метод Equals должен правильно определять равенство двух объектов.

7.  Объясните роль ведер в Hashtable и их вклад в эффективность поиска ключей.
- Ведра в Hashtable представляют собой внутренние хранилища для элементов с одинаковыми 
хеш-кодами. Они играют важную роль в эффективности поиска ключей, поскольку позволяют 
быстро найти подходящее место для хранения элементов и уменьшить количество коллизий.



