1. Объясните принципиальное различие между классом и объектом в объектно-ориентированном 
программировании. Приведите примеры, иллюстрирующие это различие. 
- Класс это тип данных который определяет набор полей (членов данных) и методов (членов функций). 
Он является шаблоном для создания объектов.
Объект это экземпляр класса. Он представляет конкретный элемент созданный на основе класса.

// Определение класса
public class Car
{
    public string Make { get; set; }
    public string Model { get; set; }

    public Car(string make, string model)
    {
        Make = make;
        Model = model;
    }
}

// Создание объекта класса Car
Car myCar = new Car("Toyota", "Camry");

2. Когда создается экземпляр класса, что хранится в переменной? Опишите процесс 
выделения памяти и присвоения ссылок. 
- При создании экземпляра класса в C# выделяется память для хранения данных объекта (полей класса). 
Ссылка на этот объект присваивается переменной.

3. Опишите концепцию свойств в C# и то, как они обеспечивают гибкий 
механизм для работы с данными. Приведите примеры сценариев, в которых 
свойства могут быть полезны. 
- Свойства предоставляют доступ к данным класса и позволяют контролировать их чтение и запись.

public class Person
{
    private string name;

    public string Name
    {
        get { return name; }
        set { name = value; }
    }
}

// Использование свойства
Person person = new Person();
person.Name = "John";
Console.WriteLine(person.Name); // Выводит "John"

4. Различайте аксессоры свойств "get", "set" и "init". Как они влияют 
на доступность и модифицируемость данных?
- get: Возвращает значение свойства.
  set: Устанавливает значение свойства.
  init: Позволяет установить значение только в конструкторе и 
  после этого становится доступным только для чтения.

5. Каково назначение модификатора "required modifier" в C# 11 и где он 
может быть применен? Объясните правила и ограничения, связанные с использованием 
модификатора required. 
- Модификатор required указывает что свойство или параметр 
конструктора должно быть обязательно инициализировано.

6. Обсудите роль атрибута "SetsRequiredMembers" и его последствия для типов с 
обязательными членами. Как он влияет на поведение конструктора?
- Это атрибут который указывает компилятору на необходимость установки 
обязательных членов типа перед завершением конструктора.
Влияет на поведение конструктора гарантируя установку всех 
обязательных членов до завершения создания объекта.