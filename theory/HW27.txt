#27. .NET Collections. Introduction to .NET Collections. Different types of collections. 
IEnumerable. ICollection. IList. Iterator.


1.  Какова цель использования коллекций в .NET и чем они отличаются от массивов?
- Коллекции в .NET используются для хранения и управления группой объектов. 
Они отличаются от массивов тем, что их размер может изменяться динамически, 
они поддерживают различные операции вставки, удаления и поиска элементов, 
а также предоставляют более высокий уровень абстракции для работы с данными.

2.  Можете ли вы назвать некоторые часто используемые классы в пространстве имен 
System.Collections.Generic и кратко описать их назначение?
- Некоторые часто используемые классы в пространстве имен System.Collections.Generic 
включают List<T>, Dictionary<TKey, TValue>, HashSet<T>, Queue<T> и Stack<T>. 
List<T> представляет собой динамический массив, Dictionary<TKey, TValue> представляет 
ассоциативный массив, а HashSet<T> представляет собой набор уникальных элементов. 
Queue<T> и Stack<T> представляют очередь и стек соответственно.

3.  Каково значение пространства имен System.Collections.Concurrent в .NET и когда 
можно использовать коллекции из этого пространства имен?
- Пространство имен System.Collections.Concurrent в .NET предоставляет потокобезопасные 
коллекции, которые могут использоваться в многопоточных средах. Это особенно полезно, 
когда необходимо обрабатывать данные из нескольких потоков без необходимости 
в явной синхронизации.

4.  Каково назначение интерфейса IEnumerable и как он связан с коллекциями, не относящимися 
к Generic?
- Интерфейс IEnumerable представляет собой базовый интерфейс, который позволяет перечислять
элементы коллекции. Он связан с коллекциями, не относящимися к Generic, 
так как позволяет получать доступ к элементам коллекции без знания их конкретного типа.

5.  Что представляет собой интерфейс IList и к каким категориям относятся его реализации?
 Дайте обзор его свойств и методов.
- Интерфейс IList представляет коллекцию, которая поддерживает доступ к элементам по индексу.
К его реализациям относятся классы ArrayList, List<T> и другие. 
Он предоставляет свойства и методы для работы с элементами коллекции, 
включая Add, Remove, IndexOf и т. д.

6.  В чем преимущества использования итераторов в .NET и в каких сценариях они могут быть 
особенно полезны?
- Итераторы в .NET представляют собой механизм, который позволяет перебирать элементы 
последовательности по одному. Они упрощают код, делая его более читаемым и поддерживаемым. 
Итераторы особенно полезны в сценариях, где требуется обработка больших объемов 
данных или ленивая загрузка.

7.  Как итераторы могут помочь упростить код, особенно когда речь идет о сложной логике 
завершения последовательности списков?
- Итераторы могут помочь упростить код, особенно при работе с сложной логикой завершения 
последовательности списков, предоставляя удобный способ перечисления элементов 
коллекции без необходимости явного управления индексами или состоянием итерации.