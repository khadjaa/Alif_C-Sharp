#26. .NET SOLID.  Generic Types. Covariance & Contravariance.


1.  Как использование параметров типа (например, T) в общих классах и методах способствует 
избыточному использованию, безопасности типов и эффективности в .NET?
- Параметры типа (например, T) в generic классах и методах позволяют создавать универсальные
решения для разных типов данных, обеспечивая безопасность типов на этапе компиляции и 
повышая эффективность за счет повторного использования кода.

2.  Почему рекомендуется использовать классы коллекций на основе generic в пространстве 
имен System.Collections.Generic вместо негенерических коллекций типа ArrayList?
- Использование generic коллекций из пространства имен System.Collections.Generic 
рекомендуется из-за безопасности типов на этапе компиляции, что помогает избежать 
ошибок времени выполнения, связанных с неправильными приведениями типов.

3.  Объясните концепцию совместимости присваиваний и то, как ковариация сохраняет ее в C#.
- Ковариация сохраняет совместимость присваиваний, позволяя присваивать переменным 
типов объекты, являющиеся производными от указанного типа.

4.  Что такое контравариантность и как она изменяет совместимость присваиваний в C#?
- Контравариантность изменяет совместимость присваиваний, разрешая присвоение методов 
с более общими параметрами, что делает код более гибким и универсальным.

5.  Опишите сценарии, в которых вы можете назначить делегатам методы, имеющие одинаковые 
сигнатуры, возвращающие больше производных типов (ковариация) или принимающие параметры с 
меньшим количеством производных типов (контравариация), чем указано в типе делегата.
- Мы можем использовать ковариантные делегаты для методов, возвращающих производные типы, 
и контравариантные делегаты для методов, принимающих менее производные типы.