1.  Как создать пользовательские исключения в C#?
- Для создания пользовательских исключений в C# необходимо создать новый класс, 
который наследуется от базового класса Exception.

2.  Каково назначение блока 'try...catch...finally' в обработке исключений? Опишите каждую часть этого блока.
	try: В этом блоке размещается код, который может вызвать исключение.
	catch: В этом блоке указываются обработчики исключений, которые могут быть выброшены в блоке try.
	finally: Этот блок содержит код, который выполняется всегда, независимо от того, произошло исключение или нет.

3.  Как можно получить дополнительную информацию о типе возникшего исключения при обработке исключений в C#?
- Для получения дополнительной информации о типе возникшего исключения в блоке catch 
можно использовать ключевое слово ex:

4.  Какими свойствами обладают все исключения в C#, и какую информацию об ошибке они предоставляют?
- Все исключения в C# обладают свойствами, такими как Message, StackTrace, 
InnerException, предоставляя информацию о произошедшей ошибке.

5.  Можно ли иметь несколько блоков catch с разными классами исключений, соединенных в цепочку? 
Как они оцениваются и выполняются?
- Да, можно иметь несколько блоков catch с разными классами исключений. 
Они оцениваются сверху вниз, и первый подходящий блок catch выполняется.

6.  Как блок 'finally' помогает освободить ресурсы в C#? Приведите пример использования блока 'finally' 
для закрытия файла.
- Блок finally помогает освободить ресурсы, так как код внутри этого блока выполняется всегда, 
даже если возникло исключение.

FileStream file = null;
try
{
    file = new FileStream("example.txt", FileMode.Open);
    // Работа с файлом
}
catch (IOException ex)
{
    // Обработка исключения ввода-вывода
}
finally
{
    // Закрытие файла, даже если возникло исключение
    file?.Close();
}
