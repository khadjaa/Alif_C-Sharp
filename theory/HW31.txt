#31. .NET Reflection and Attributes.. Introduction. Create custom attributes. 
Generic and Attributes.


1.  Объясните концепцию добавления пользовательских атрибутов в программу.
- Добавление пользовательских атрибутов в программу позволяет разработчикам добавлять 
метаданные и дополнительную информацию к типам, членам или другим элементам программы. 
Это может быть использовано для описания поведения, конфигурации, или других аспектов, 
которые могут быть полезны во время выполнения программы.

2.  Можно ли применить несколько атрибутов одного типа к одному объекту программы? 
Приведите пример.
- Да, можно применить несколько атрибутов одного типа к одному объекту программы. 
Например: 

[Serializable]
[Obsolete("This class is obsolete.")]
public class MyClass
{
    
}

3.  Объясните значение суффикса Attribute в имени класса пользовательского атрибута.
- Суффикс "Attribute" в имени класса пользовательского атрибута является соглашением в 
.NET и используется для обозначения того, что класс является атрибутом. Например, класс, 
описывающий атрибут, может называться "CustomAttribute".

4.  Объясните назначение метода GetCustomAttributes в контексте отражения и атрибутов.
- Метод GetCustomAttributes используется в контексте отражения для получения всех атрибутов,
 примененных к определенному элементу программы (например, типу, методу или свойству). 
Этот метод позволяет программе динамически изучать атрибуты и принимать решения на 
основе их присутствия и значений.

5.  Различайте открытые родовые типы, закрытые конструируемые родовые типы и частично 
конструируемые родовые типы.
- Открытые родовые типы - это обобщенные типы с использованием аргументов типов, доступные 
в любой части программы. Закрытые конструируемые родовые типы - это обобщенные типы, 
конкретизированные с определенными аргументами типов, доступные только в своем контексте. 
Частично конструируемые родовые типы содержат открытые и закрытые аргументы типов и могут 
использоваться с частично конкретизированными аргументами типов.