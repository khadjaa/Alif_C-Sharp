#30. .NET Collections. Immutable Collections. Complexity of collections.


1.  Назовите не менее трех типов неизменяемых коллекций, представленных в .NET, 
и кратко опишите каждый из них.

ImmutableList<T>: Представляет неизменяемую коллекцию элементов, упорядоченных по порядку 
вставки. Элементы в этой коллекции нельзя изменить после их добавления.

ImmutableHashSet<T>: Представляет неизменяемое множество уникальных элементов, где порядок 
элементов не гарантирован.

ImmutableDictionary<TKey, TValue>: Представляет неизменяемое отображение ключей на значения.

2.  Какова временная сложность добавления элемента в список с помощью метода Add 
в среднем и худшем случаях?

В среднем случае: O(1)

В худшем случае: O(n), где n - текущий размер списка.

3.  Какова временная сложность операций над неизменяемыми коллекциями по сравнению 
с их изменяемыми аналогами, и как это влияет на производительность?

- Временная сложность операций над неизменяемыми коллекциями обычно выше, чем у их изменяемых 
аналогов. Это связано с тем, что при изменении неизменяемой коллекции требуется создание 
новой копии с измененными элементами, что может быть дорогостоящей операцией по сравнению 
с простыми манипуляциями внутри изменяемой коллекции. Это может негативно сказываться на 
производительности, особенно при работе с большими объемами данных.

4.  В каких ситуациях временная сложность операций над коллекцией может быть решающим
фактором при выборе структуры данных? Приведите пример.

- Временная сложность операций над коллекциями становится решающим фактором при выборе 
структуры данных, когда производительность критически важна, особенно при работе с 
большими объемами данных. Например, если требуется часто добавлять и удалять элементы 
из коллекции, то выбор изменяемой коллекции с более низкой временной сложностью может 
быть предпочтительным. Если же требуется обеспечить надежность и предсказуемость 
операций при многократных изменениях данных, то неизменяемая коллекция может быть 
более подходящим выбором.